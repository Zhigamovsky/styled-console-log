import { $Config, $Logger, $Types, $Utils, $Own, loadImage, $Timing } from "./config/constants";

const Log = {
  warn: (...args) => $Logger($Types.warn, null, ...args),
  error: (...args) => $Logger($Types.error, null, ...args),
  success: (...args) => $Logger($Types.success, null, ...args),
  dark: (...args) => $Logger($Types.dark, null, ...args),
  light: (...args) => $Logger($Types.light, null, ...args),
  info: (...args) => $Logger($Types.info, null, ...args),
  render: (...args) => $Logger($Types.render, null, ...args),
  hazel: (...args) => $Logger($Types.hazel, null, ...args),
  event: (...args) => $Logger($Types.event, null, ...args),
  zelda: (...args) => $Logger($Types.zelda, null, ...args),
  merge: (...args) => $Logger($Types.merge, null, ...args),
  rozy: (...args) => $Logger($Types.rozy, null, ...args),
  ruddy: (...args) => $Logger($Types.ruddy, null, ...args),
  check: (...args) => $Logger($Types.check, null, ...args),
  $1: (...args) => $Logger($Types.$1, null, ...args),
  $2: (...args) => $Logger($Types.$2, null, ...args),
  $3: (...args) => $Logger($Types.$3, null, ...args),
  $4: (...args) => $Logger($Types.$4, null, ...args),
  $5: (...args) => $Logger($Types.$5, null, ...args),
  $6: (...args) => $Logger($Types.$6, null, ...args),
  $7: (...args) => $Logger($Types.$7, null, ...args),
  $8: (...args) => $Logger($Types.$8, null, ...args),
  image: (url) => loadImage(url),
  gif: (url) => loadImage(url, { width: 100, height: 100}),
  utils: $Utils,
  setEnvironmentDebug: () => $Config.debug = true,
  setEnvironmentRelease: () => $Config.debug = false,
  setEnvironmentTiming: (value = !$Config.timing) => $Config.timing = value,
  disableEnvironmentTiming: () => $Config.timing = false,
  setTimingConfig: (config) => $Timing.config = config,
  setTimingLocale: (locale) => $Timing.locale = locale,
  setTimingExtendedFormat: () => $Timing.format = 'extended',
  setTimingMinifiedFormat: () => $Timing.format = 'minified',
  overrideStyles: $Own.overrideStyles,
  overrideIcons: $Own.overrideIcons,
  addOwnTemplate: $Own.addOwnTemplate,
  divided: $Own.divided
}

export const log = {
  warn: (...args) => config => $Logger($Types.warn, config, ...args),
  error: (...args) => config => $Logger($Types.error, config, ...args),
  success: (...args) => config => $Logger($Types.success, config, ...args),
  dark: (...args) => config => $Logger($Types.dark, config, ...args),
  light: (...args) => config => $Logger($Types.light, config, ...args),
  info: (...args) => config => $Logger($Types.info, config, ...args),
  render: (...args) => config => $Logger($Types.render, config, ...args),
  hazel: (...args) => config => $Logger($Types.hazel, config, ...args),
  event: (...args) => config => $Logger($Types.event, config, ...args),
  zelda: (...args) => config =>  $Logger($Types.zelda, config, ...args),
  merge: (...args) => config =>  $Logger($Types.merge, config, ...args),
  rozy: (...args) => config =>  $Logger($Types.rozy, config, ...args),
  ruddy: (...args) => config =>  $Logger($Types.ruddy, config, ...args),
  check: (...args) => config =>  $Logger($Types.check, config, ...args),
  $1: (...args) => config =>  $Logger($Types.$1, config, ...args),
  $2: (...args) => config =>  $Logger($Types.$2, config, ...args),
  $3: (...args) => config =>  $Logger($Types.$3, config, ...args),
  $4: (...args) => config =>  $Logger($Types.$4, config, ...args),
  $5: (...args) => config =>  $Logger($Types.$5, config, ...args),
  $6: (...args) => config =>  $Logger($Types.$6, config, ...args),
  $7: (...args) => config =>  $Logger($Types.$7, config, ...args),
  $8: (...args) => config =>  $Logger($Types.$8, config, ...args),
  image: (url) => config => loadImage(url, config),
  gif: (url) => config => loadImage(url, { width: 100, height: 100, ...config}),
  utils: $Utils,
  setEnvironmentDebug: () => $Config.debug = true,
  setEnvironmentRelease: () => $Config.debug = false,
  setEnvironmentTiming: (value = !$Config.timing) => $Config.timing = value,
  disableEnvironmentTiming: () => $Config.timing = false,
  setTimingConfig: (config) => $Timing.config = config,
  setTimingLocale: (locale) => $Timing.locale = locale,
  setTimingExtendedFormat: () => $Timing.format = 'extended',
  setTimingMinifiedFormat: () => $Timing.format = 'minified',
  overrideStyles: $Own.overrideStyles,
  overrideIcons: $Own.overrideIcons,
  addOwnTemplate: $Own.addOwnTemplate,
  divided: $Own.divided
}

export let Types = $Types;

export default Log;